/*
Copyright 2022 Google LLC.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package controllers

import (
	networkingv1alpha4 "github.com/delta10/fqdnnetworkpolicies/api/v1alpha4"
	networking "k8s.io/api/networking/v1"
)

// Helper function to check string exists in a slice of strings.
func containsString(slice []string, s string) bool {
	for _, item := range slice {
		if item == s {
			return true
		}
	}
	return false
}

// Helper function to remove string from a slice of string
func removeString(slice []string, s string) (result []string) {
	for _, item := range slice {
		if item == s {
			continue
		}
		result = append(result, item)
	}
	return
}

func flatten[T any](lists [][]T) []T {
	var res []T
	for _, list := range lists {
		res = append(res, list...)
	}
	return res
}

// Merge a number of domainCaches generated by rule evaluations into a single
// new cache for the FQDNNetworkPolicy
func mergeCaches(caches ...map[string]*networkingv1alpha4.DomainCache) (mergedCache map[string]*networkingv1alpha4.DomainCache) {
	mergedCache = make(map[string]*networkingv1alpha4.DomainCache)
	for _, cache := range caches {
		for fqdn, domainCache := range cache {
			existingDomainCache, exists := mergedCache[fqdn]
			if !exists {
				mergedCache[fqdn] = domainCache
			} else {
				// This code should only run if the domain is found in multiple rules.
				// The values can in rare cases divert substantially, when one rule was
				// only just skipped because NextUpdateTime is in the future, while the
				// other was only just evaluated. In that case we want to use the
				// earliest time so that we reconcile on the next run.
				if domainCache.NextUpdateTime.Before(&existingDomainCache.NextUpdateTime) {
					mergedCache[fqdn].NextUpdateTime = domainCache.NextUpdateTime
				}
				for ip, expires := range domainCache.IPExpiration {
					mergedCache[fqdn].IPExpiration[ip] = expires
				}
			}
		}
	}
	return
}

func removeDuplicatePeers(peers []networking.NetworkPolicyPeer) (newPeers []networking.NetworkPolicyPeer) {
	ipMap := make(map[string]bool)
	for _, peer := range peers {
		ip := peer.IPBlock.CIDR
		if _, exists := ipMap[ip]; !exists {
			ipMap[ip] = true
			newPeers = append(newPeers, peer)
		}
	}
	return
}
